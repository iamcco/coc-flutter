{
  "name": "coc-flutter",
  "version": "1.9.2",
  "description": "flutter support for (Neo)vim",
  "author": "iamcco <ooiss@qq.com>",
  "license": "MIT",
  "main": "out/index.js",
  "keywords": [
    "coc.nvim",
    "flutter",
    "lsp",
    "dart"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "scripts": {
    "clean": "rm -rf ./out",
    "watch": "NODE_ENV=development node esbuild.js --watch",
    "build": "NODE_ENV=production node esbuild.js",
    "lint": "eslint src",
    "lint-fix": "eslint --fix src",
    "prepare": "husky install && npm run clean && npm run build"
  },
  "activationEvents": [
    "workspaceContains:pubspec.yaml",
    "onLanguage:dart",
    "onCommand:flutter.run",
    "onCommand:flutter.doctor",
    "onCommand:flutter.upgrade",
    "onCommand:flutter.create",
    "onCommand:flutter.pub.get",
    "onCommand:flutter.devices",
    "onCommand:flutter.emulators"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "dart",
        "patterns": [
          "pubspec.yaml"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "flutter configuration",
      "properties": {
        "flutter.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "message",
            "verbose"
          ],
          "description": "Trace level of log"
        },
        "flutter.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-flutter extension"
        },
        "flutter.fvm.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable checking of fvm directories to find flutter install"
        },
        "flutter.sdk.path": {
          "type": "string",
          "default": [],
          "description": "The path of the flutter sdk to use. (When using the `FlutterSDKs` list to change sdk this value will be updated)"
        },
        "flutter.sdk.searchPaths": {
          "type": "array",
          "default": [],
          "item": "string",
          "description": "The paths to search for flutter sdks, either directories where flutter is installed or directories which contain directories where flutter versions have been installed\neg. /path/to/flutter (command at /path/to/flutter/bin/flutter) \n~/flutter_versions (command at ~/flutter_versions/version/bin/flutter)."
        },
        "flutter.lsp.debug": {
          "type": "boolean",
          "default": false,
          "description": "Enable debug for language server"
        },
        "flutter.lsp.initialization.onlyAnalyzeProjectsWithOpenFiles": {
          "type": "boolean",
          "default": true,
          "description": "When set to true, analysis will only be performed for projects that have open files rather than the root workspace folder."
        },
        "flutter.lsp.initialization.suggestFromUnimportedLibraries": {
          "type": "boolean",
          "default": true,
          "description": "When set to false, completion will not include synbols that are not already imported into the current file"
        },
        "flutter.lsp.initialization.closingLabels": {
          "type": "boolean",
          "default": true,
          "description": "When set to true, dart/textDocument/publishClosingLabels notifications will be sent with information to render editor closing labels."
        },
        "flutter.sdk.dart-command": {
          "type": "string",
          "default": "",
          "description": "dart command, leave empty should just work"
        },
        "flutter.sdk.dart-lookup": {
          "type": "string",
          "default": "",
          "description": "command to find dart executable location, used to infer dart-sdk location"
        },
        "flutter.sdk.flutter-lookup": {
          "type": "string",
          "default": "",
          "description": "command to find flutter executable location, used to infer location of dart-sdk in flutter cache"
        },
        "flutter.provider.hot-reload": {
          "type": "boolean",
          "default": true,
          "description": "Enable hot reload after save"
        },
        "flutter.provider.enableSnippet": {
          "type": "boolean",
          "default": true,
          "description": "Enable completion item snippet"
        },
        "flutter.openDevLogSplitCommand": {
          "type": "string",
          "default": "",
          "description": "Vim command to open dev log window, like: `botright 10split`"
        },
        "flutter.workspaceFolder.ignore": {
          "type": "array",
          "default": [],
          "item": "string",
          "description": "Path start within the list will not treat as workspaceFolder"
        },
        "flutter.autoOpenDevLog": {
          "type": "boolean",
          "default": false,
          "description": "Automatically open the dev log after calling flutter run"
        },
        "flutter.autoHideDevLog": {
          "type": "boolean",
          "default": false,
          "description": "Automatically hide the dev log when the app stops running"
        },
        "flutter.runDevToolsAtStartup": {
          "type": "boolean",
          "default": false,
          "description": "Automatically run the DevTools debugger in a web browser when running a project"
        },
        "flutter.commands.devicesTimeout": {
          "type": "integer",
          "default": 1,
          "description": "Sets the `--device-timout` flag when running `flutter devices`"
        },
        "flutter.selectedDeviceId": {
          "type": "string",
          "default": null,
          "description": "The id of the device that is selected and will be used by `flutter.run` if it is available."
        },
        "flutter.devicesDefaultAction": {
          "type": "string",
          "default": "workspaceState",
          "enum": [
            "workspaceState",
            "workspaceConfig",
            "currentSession",
            "globalState",
            "globalConfig",
            "runOnce"
          ],
          "description": "The default action to use when pressing enter in the `FlutterDevices` list.\nThe `state` options will store the selected device in coc's `memos.json` file.\nThe `config` options will store the selected device in the `coc-settings.json` file."
        },
        "dart.analysisExcludedFolders": {
          "type": "array",
          "default": [],
          "item": "string",
          "description": "An array of paths (absolute or relative to each workspace folder) that should be excluded from analysis."
        },
        "dart.enableSdkFormatter": {
          "type": "boolean",
          "default": true,
          "description": "When set to false, prevents registration (or unregisters) the SDK formatter. When set to true or not supplied, will register/reregister the SDK formatter."
        },
        "dart.lineLength": {
          "type": "number",
          "default": 80,
          "description": "The number of characters the formatter should wrap code at. If unspecified, code will be wrapped at 80 characters."
        },
        "dart.completeFunctionCalls": {
          "type": "boolean",
          "default": true,
          "description": "Completes functions/methods with their required parameters."
        },
        "dart.showTodos": {
          "type": "boolean",
          "default": true,
          "description": "Whether to generate diagnostics for TODO comments. If unspecified, diagnostics will not be generated."
        }
      }
    },
    "commands": [
      {
        "command": "flutter.run",
        "title": "Run flutter server"
      },
      {
        "command": "flutter.attach",
        "title": "Attach running application"
      },
      {
        "command": "flutter.create",
        "title": "Create flutter project using: flutter create project-name"
      },
      {
        "command": "flutter.doctor",
        "title": "flutter doctor"
      },
      {
        "command": "flutter.upgrade",
        "title": "flutter upgrade"
      },
      {
        "command": "flutter.pub.get",
        "title": "flutter pub get"
      },
      {
        "command": "flutter.devices",
        "title": "open devices list"
      },
      {
        "command": "flutter.emulators",
        "title": "open emulators list"
      }
    ]
  },
  "devDependencies": {
    "@types/node": "^10.12.0",
    "@typescript-eslint/eslint-plugin": "^4.16.1",
    "@typescript-eslint/parser": "^4.16.1",
    "coc.nvim": "^0.0.80",
    "colors": "^1.4.0",
    "esbuild": "^0.9.0",
    "eslint": "^7.21.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-prettier": "^3.3.1",
    "fast-glob": "^3.2.5",
    "husky": "^5.1.3",
    "prettier": "^2.2.1",
    "typescript": "^4.2.2",
    "vscode-languageserver-protocol": "^3.16.0",
    "which": "^2.0.2"
  }
}
